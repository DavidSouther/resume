{"version":3,"file":"static/chunks/app/page-4e5291bd66419a17.js","mappings":"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","sources":["webpack://_N_E/","webpack://_N_E/./src/components/Card.tsx","webpack://_N_E/./src/components/resume/AboutMe.tsx","webpack://_N_E/./src/components/Layout.tsx","webpack://_N_E/../../jefri/jiffdown/src/info.mjs","webpack://_N_E/../../jefri/jiffdown/src/block_info.mjs","webpack://_N_E/../../jefri/jiffdown/src/entities.mjs","webpack://_N_E/../../jefri/jiffdown/src/image.mjs","webpack://_N_E/../../jefri/jiffdown/src/inline.mjs","webpack://_N_E/../../jefri/jiffdown/src/references.mjs","webpack://_N_E/../../jefri/jiffdown/index.mjs","webpack://_N_E/./src/components/P.tsx","webpack://_N_E/./src/components/resume/Organization.tsx","webpack://_N_E/./src/lib/util.ts","webpack://_N_E/./src/components/resume/JobDetail.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"/Users/davidsouther/devel/davidsouther/resume/node_modules/next/dist/client/link.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/davidsouther/devel/davidsouther/resume/src/components/Card.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/davidsouther/devel/davidsouther/resume/src/components/Layout.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/davidsouther/devel/davidsouther/resume/src/components/resume/JobDetail.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/davidsouther/devel/davidsouther/resume/src/components/P.tsx\")","\"use client\";\nimport { ReactNode } from \"react\";\n\nexport const Card = ({\n  className = \"\",\n  header,\n  children,\n  footer,\n}: {\n  className?: string;\n  header?: ReactNode;\n  children: ReactNode;\n  footer?: ReactNode;\n}) => (\n  <article className={className}>\n    <>\n      {header && (\n        <header>\n          <h3>{header}</h3>\n        </header>\n      )}\n      <main>{children}</main>\n      {footer && <footer>{footer}</footer>}\n    </>\n  </article>\n);\n","\"use client\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport * as ResumeTypes from \"~/lib/resume\";\n\nexport const Contact = ({\n  links = [],\n  contact = {},\n}: {\n  links?: ResumeTypes.Link[];\n  contact?: ResumeTypes.Contact;\n}) => {\n  const contactLinks: ResumeTypes.Link[] = [\n    ...(contact.publicProfiles ?? []),\n    ...(contact.contactMails?.map(\n      (p) =>\n        ({\n          type: \"email\",\n          URL: `mailto:${p}`,\n        } satisfies ResumeTypes.Link),\n    ) ?? []),\n    ...(contact.phoneNumbers?.map(\n      (p) =>\n        ({\n          type: \"tel\",\n          URL: `tel:+${p.countryCode} ${p.number}`,\n        } satisfies ResumeTypes.Link),\n    ) ?? []),\n  ];\n  const allLinks = [...links, ...contactLinks].map((p) => ({\n    type: p.URL,\n    URL: p.URL,\n  }));\n  return allLinks && <Links className=\"contact\" links={allLinks} />;\n};\n\nexport const AboutMe = ({ aboutMe }: { aboutMe: ResumeTypes.AboutMe }) => (\n  <>\n    <hgroup>\n      <h1>\n        <Link href=\"/\">\n          {aboutMe.profile.name} {aboutMe.profile.surnames ?? \"\"}\n        </Link>\n      </h1>\n      <h2>{aboutMe.profile.title}</h2>\n    </hgroup>\n    {aboutMe.profile.avatar && (\n      <Avatar avatar={aboutMe.profile.avatar} name={aboutMe.profile.name} />\n    )}\n    {aboutMe.profile.location && (\n      <Location location={aboutMe.profile.location} />\n    )}\n    <Contact links={aboutMe.relevantLinks} contact={aboutMe.profile.contact} />\n  </>\n);\n\nconst Avatar = ({\n  avatar,\n  name,\n}: {\n  avatar: ResumeTypes.Image;\n  name: string;\n}) => (\n  <figure>\n    <Image\n      height=\"136\"\n      width=\"136\"\n      alt={`${name} Professional Photo`}\n      src={\n        (avatar as ResumeTypes.ImageLink).link\n          ? (avatar as ResumeTypes.ImageLink).link\n          : `data:${(avatar as ResumeTypes.ImageData).mediaType};base64,${\n              (avatar as ResumeTypes.ImageData).data\n            }`\n      }\n      style={{\n        maxWidth: \"100%\",\n        height: \"auto\",\n      }}\n    />\n  </figure>\n);\n\nconst Location = ({ location }: { location: ResumeTypes.Location }) => (\n  <p className=\"location\">\n    {Object.entries(location).map(([k, v]) => (\n      <span key={k} className={`location ${k}`}>\n        {v}\n      </span>\n    ))}\n  </p>\n);\n\nconst Links = ({\n  links,\n  className = \"\",\n}: {\n  links: ResumeTypes.Link[];\n  className?: string;\n}) => (\n  <nav className={className}>\n    <ul>\n      {links.map((link) => (\n        <li key={link.URL}>\n          <a href={link.URL} className=\"no-print\">\n            <span>{link.type}</span>\n          </a>\n          <span className=\"print-only\">{link.URL}</span>\n        </li>\n      ))}\n    </ul>\n  </nav>\n);\n","\"use client\";\nimport { PropsWithChildren } from \"react\";\nimport Head from \"next/head\";\nimport { AboutMe } from \"./resume/AboutMe\";\nimport * as ResumeTypes from \"~/lib/resume\";\nimport resume from \"../app/resume.json\";\n\nexport default function Layout({\n  children,\n  title,\n}: PropsWithChildren<{ title: string }>) {\n  return (\n    <>\n      <div id=\"root\" className=\"root\">\n        <Head>\n          <title>{title}</title>\n          <meta name=\"description\" content={title} />\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        </Head>\n        <header>\n          <AboutMe aboutMe={resume.aboutMe as ResumeTypes.AboutMe} />\n        </header>\n        <main>{children}</main>\n        <footer className=\"no-print\">\n          <nav>\n            <p>\n              © David Souther 2008-\n              {new Date(resume.settings.lastUpdate).getFullYear()}\n            </p>\n            <cite>\n              <a href=\"https://github.com/davidsouther/resume\">Page Source</a>\n            </cite>\n          </nav>\n        </footer>\n      </div>\n    </>\n  );\n}\n","export function parseInfo(info = \"\") {\n  const spec = {\n    id: undefined,\n    tag: \"\",\n    classes: [],\n    attributes: {},\n  };\n\n  let idx = 0;\n  let state = \"tag\";\n  let attr = \"\";\n  let value = \"\";\n\n  function transition(next) {\n    switch (state) {\n      case \"tag\":\n        if (!spec.tag) {\n          spec.tag = value;\n        }\n        break;\n      case \"id\":\n        spec.id = value;\n        break;\n      case \"class\":\n        spec.classes.push(value);\n        break;\n      case \"attr\":\n        attr = value;\n        break;\n      case \"val\":\n        spec.attributes[attr] = value;\n        break;\n    }\n    value = \"\";\n    state = next;\n  }\n\n  while (idx < info.length) {\n    switch (info.charAt(idx)) {\n      case \"#\":\n        transition(\"id\");\n        break;\n      case \".\":\n        transition(\"class\");\n        break;\n      case \"[\":\n        transition(\"attr\");\n        break;\n      case \"=\":\n        transition(\"val\");\n        break;\n      case \"]\":\n      case \" \":\n        transition(\"tag\");\n        break;\n      default:\n        value += info.charAt(idx);\n        break;\n    }\n    idx += 1;\n  }\n  transition(\"end\");\n\n  spec.classes.sort();\n\n  spec.tag = spec.tag || \"span\";\n\n  return spec;\n}\n\nexport function renderInfo(info, content, type = \"inline\") {\n  let tag = \"<\" + info.tag;\n  if (info.id) {\n    tag += ` id=\"${info.id}\"`;\n  }\n  if (info.classes.length > 0) {\n    tag += ` class=\"${info.classes.join(\" \")}\"`;\n  }\n  const attrs = Object.entries(info.attributes);\n  if (attrs.length > 0) {\n    tag += \" \" + attrs.map(([k, v]) => `${k}=\"${v}\"`).join(\" \");\n  }\n  if (info.tag === \"img\") {\n    tag += ` alt=\"${content}\" />`;\n  } else {\n    if (type == \"block\") {\n      tag += `>\\n${content}</${info.tag}>\\n`;\n    } else {\n      tag += `>${content}</${info.tag}>`;\n    }\n  }\n  return tag;\n}\n","import { marked } from \"marked\";\nimport { parseInfo, renderInfo } from \"./info.mjs\";\n\nconst TOKEN_TYPE = \"block-info\";\n\n/** @type {marked.TokenizerAndRendererExtension} */\nconst BLOCK_INFO = {\n  name: TOKEN_TYPE,\n  level: \"block\",\n  start(src) {\n    return src.match(/>[ \\t]?{/)?.index;\n  },\n  tokenizer(src) {\n    const match = src.match(\n      // Anchor to start\n      // Capture group named leader\n      //  Any number of space or tab characters\n      //  Literal >\n      //  Zero or one space or tab\n      //  Literal {\n      //  Capture group inside leader named info\n      //      Capture tokens up to next } (no nested infoblocks)\n      //  Literal }\n      // The rest of the content\n      // Noncaptureing group of two newlines or end of string, optional.\n      /^(?<leader>[ \\t]*>[ \\t]?\\{(?<info>[^}]+)\\}).*(?:\\n\\n|$)?/\n    );\n    if (match) {\n      const text = src\n        .replace(match.groups?.leader, \"\")\n        .replace(/^ *>[ \\t]?/gm, \"\")\n        .trim();\n      const token = {\n        type: TOKEN_TYPE,\n        raw: match[0],\n        tokens: [],\n        text,\n        info: parseInfo(match.groups.info),\n      };\n      if (token.info.id) {\n        token.id = token.info.id;\n      }\n      this.lexer.blockTokens(token.text, token.tokens);\n      return token;\n    }\n    return false;\n  },\n  renderer(token) {\n    return renderInfo(token.info, this.parser.parse(token.tokens), \"block\");\n  },\n};\n\nexport default { extensions: [BLOCK_INFO] };\n","import { marked } from \"marked\";\nimport HTML_ENTITIES from \"./known_entities.json\" assert { type: \"json\" };\n\nfunction isHtmlEntity(name) {\n  return HTML_ENTITIES[`&${name};`] !== undefined;\n}\n\nconst KNOWN_ENTITIES = new Map();\n\nconst RegisterEntitiesName = \"register-entities\";\n\n/** @type {marked.TokenizerAndRendererExtension} */\nconst RegisterEntities = {\n  name: RegisterEntitiesName,\n  level: \"inline\",\n  start(src) {\n    return src.indexOf(\"&\");\n  },\n  tokenizer(src) {\n    const match = src.match(/^&(?<name>[^:]+):(?<value>[^;]+);/);\n    if (match) {\n      const { name, value } = match.groups;\n      if (isHtmlEntity(name)) return false;\n      KNOWN_ENTITIES.set(name, value.trim());\n      return {\n        type: RegisterEntitiesName,\n        raw: match[0],\n      };\n    }\n    return false;\n  },\n  renderer() {\n    return \"\";\n  },\n};\n\nconst LookupEntitiesName = \"lookup-entities\";\n/** @type {marked.TokenizerAndRendererExtension} */\nconst LookupEntites = {\n  name: LookupEntitiesName,\n  level: \"inline\",\n  start(src) {\n    return src.indexOf(\"&\");\n  },\n  tokenizer(src) {\n    const match = src.match(/^&(?<name>(?!\\{)[^:;]+);/);\n    if (match) {\n      const { name } = match.groups;\n      if (isHtmlEntity(name)) return false;\n      return {\n        type: LookupEntitiesName,\n        raw: match[0],\n        name,\n      };\n    }\n    return false;\n  },\n  renderer(token) {\n    return KNOWN_ENTITIES.get(token.name) ?? token.name;\n  },\n};\n\nexport default {\n  extensions: [RegisterEntities, LookupEntites],\n};\n","import { parseInfo } from \"./info.mjs\";\n\n/**\n * Process an inline image with the format `![Alt Text][src \"=size title\"]`.\n * Title can start with size as `=[width]:[height] `, which will be be extracted\n * and applied to the rendered img tag.\n */\nfunction image({ href, text }) {\n  let { info, alt } = text.match(/^(?:\\{(?<info>[^}]+)\\})?\\s*(?<alt>.*)?/)\n    ?.groups ?? { info: \"\", alt: text };\n\n  info = parseInfo(info);\n\n  let width = info.attributes.width ? ` width=\"${info.attributes.width}\"` : \"\";\n  let height = info.attributes.height\n    ? ` height=\"${info.attributes.height}\"`\n    : \"\";\n  let classname =\n    info.classes.length > 0 ? ` class=\"${info.classes.join(\" \")}\" ` : \" \";\n\n  return `<img src=\"${href}\"${classname}alt=\"${alt}\"${width}${height} />`;\n}\n\n// /** @type {import(\"marked\").RendererExtension} */\nconst extension = {\n  renderer: { image },\n};\n\nexport default extension;\n","import { marked } from \"marked\";\nimport { parseInfo, renderInfo } from \"./info.mjs\";\n\n/** @type {marked.TokenizerAndRendererExtension} */\nconst INLINE = {\n  name: \"inline\",\n  level: \"inline\",\n  start(src) {\n    return src.indexOf(\"{\");\n  },\n  tokenizer(src) {\n    const match = src.match(/^\\{((?<info>[^:]+):)?(?<content>[^}]+)\\}/);\n    if (match) {\n      const text = match.groups.content.trim();\n      const innerTokens = this.lexer.inlineTokens(text);\n      return {\n        type: \"inline\",\n        raw: match[0],\n        text,\n        tokens: innerTokens,\n        info: parseInfo(match.groups.info),\n      };\n    } else {\n      return false;\n    }\n  },\n  renderer(token) {\n    if (token.type === \"inline\") {\n      return renderInfo(token.info, this.parser.parseInline(token.tokens));\n    }\n    return false;\n  },\n};\n\nexport default { extensions: [INLINE] };\n","import Slugger from \"github-slugger\";\n\n/** @type {Map<string, string>} */\nconst REFERENCES = new Map();\n/** @type {Set<string>} */\nconst MOVED = new Set();\n\nfunction findReference(name) {\n  MOVED.add(name);\n  return REFERENCES.get(name);\n}\n\nconst ReferencesName = \"references\";\n/** @type {import(\"marked\").TokenizerAndRendererExtension} */\nconst References = {\n  name: ReferencesName,\n  level: \"inline\",\n  start(src) {\n    return src.indexOf(\"&{\");\n  },\n  tokenizer(src) {\n    const match = src.match(/^&\\{(?<ref>[^}]+)};/);\n    if (match) {\n      return {\n        type: ReferencesName,\n        raw: match[0],\n        reference: match.groups.ref,\n      };\n    }\n    return false;\n  },\n  renderer(token) {\n    const reference = findReference(token.reference.replace(\"#\", \"\"));\n    if (reference) {\n      const tokens =\n        reference.type === \"section\" ? reference.tokens : [reference];\n      return this.parser.parse(tokens);\n    } else {\n      return this.parser.parse(token.tokens ?? []);\n    }\n  },\n};\n\nconst SectionsName = \"section\";\n/** @type {import(\"marked\").RendererExtension} */\nconst Sections = {\n  name: SectionsName,\n  renderer(token) {\n    if (token.type === SectionsName && !MOVED.has(token.id)) {\n      return `<section>\\n${this.parser.parse(token.tokens)}</section>\\n`;\n    }\n    return \"\";\n  },\n};\n\nexport function replaceWalkTokens(marked) {\n  REFERENCES.clear();\n  MOVED.clear();\n  const _walkTokens = marked.walkTokens;\n  marked.walkTokens = function walkTokensToBuildSections(tokens, callback) {\n    const slugger = new Slugger();\n    const values = _walkTokens.call(marked, tokens, callback);\n\n    /** @type {marked.Token[]} */\n    const stack = [];\n\n    let i = 0;\n    function popSection() {\n      const section = stack.pop();\n      if (stack.length > 0) {\n        stack.at(-1).tokens.push(section);\n      } else {\n        tokens.splice(section.pos, i - section.pos, section);\n        i = section.pos + 1;\n      }\n    }\n\n    for (; i < tokens.length; i++) {\n      const token = tokens[i];\n      const pushSection = () => {\n        const id = slugger.slug(token.id ?? token.text);\n        const section = {\n          type: SectionsName,\n          id,\n          pos: i,\n          depth: token.depth,\n          tokens: [],\n        };\n        REFERENCES.set(id, section);\n        stack.push(section);\n        token.id = section.id;\n        return section;\n      };\n\n      if (token.type === \"heading\") {\n        while (token.depth <= stack.at(-1)?.depth) {\n          popSection();\n        }\n        let section = pushSection();\n        section.tokens.push(token);\n      } else if (token.type == \"block-info\" && token.info.tag == \"section\") {\n        // A section block-info starts a new section at the current depth\n        token.depth = (stack.at(-1)?.depth ?? 0) + 1;\n        if (stack.length > 0) {\n          popSection();\n        }\n        pushSection();\n      } else if (stack.length > 0) {\n        stack.at(-1).tokens.push(token);\n      }\n    }\n\n    while (stack.length > 0) {\n      popSection();\n    }\n\n    return values;\n  };\n}\n\nexport default {\n  name: \"references\",\n  renderer: {\n    heading(token) {\n      const { tokens, depth } = token;\n      const text = this.parser.parseInline(tokens);\n      let id = token.id ? `id=\"${token.id}\"` : \"\";\n      return `<h${depth} ${id}>${text}</h${depth}>\\n`;\n    },\n  },\n  extensions: [Sections, References],\n  walkTokens(token) {\n    if (token.id) {\n      REFERENCES.set(token.id, token);\n    }\n  },\n};\n","// @ts-check\n\nimport { Marked } from \"marked\";\n\nimport blockInfo from \"./src/block_info.mjs\";\nimport entities from \"./src/entities.mjs\";\nimport image from \"./src/image.mjs\";\nimport inline from \"./src/inline.mjs\";\nimport references, { replaceWalkTokens } from \"./src/references.mjs\";\n// import hljs from \"highlight.js\";\n\nconst marked = new Marked();\nmarked.use(references);\nmarked.use(blockInfo);\nmarked.use(inline);\nmarked.use(image);\nmarked.use(entities);\n\n/** @param {string} md */\nexport function toHTML(md) {\n  replaceWalkTokens(marked);\n  return marked.parse(md);\n}\n","\"use client\";\nimport { toHTML } from \"@davidsouther/jiffdown\";\nimport { useMemo } from \"react\";\n\nexport const MD = ({ children }: { children: string }) => {\n  const body = useMemo(() => toHTML(children), [children]);\n  return <div dangerouslySetInnerHTML={{ __html: body ?? \"\" }}></div>;\n};\n\nexport const A = ({ href, children }: { children: string; href?: string }) =>\n  href ? (\n    <>\n      <a href={href}>{children}</a>\n    </>\n  ) : (\n    <span>{children}</span>\n  );\n","import type * as ResumeTypes from \"~/lib/resume\";\n\nexport const Organization = ({\n  org,\n}: {\n  org: ResumeTypes.PublicEntityDetails;\n}) => (\n  <h4 className=\"organization\">\n    {org.URL ? <a href={org.URL}>{org.name}</a> : org.name}\n  </h4>\n);\n","const SHOW_JOBS_SINCE = 2018;\n\nexport function show(date?: string | undefined): boolean {\n  if (date === undefined) return true;\n  const year = Number(date?.substring(0, 4));\n  const hide = year >= SHOW_JOBS_SINCE;\n  return hide;\n}\n","\"use client\";\nimport type * as ResumeTypes from \"~/lib/resume\";\nimport { A, MD } from \"../P\";\nimport { Organization } from \"./Organization\";\nimport { show } from \"~/lib/util\";\n\nexport const JobDetail = ({ job }: { job: ResumeTypes.JobExperience }) => {\n  const hide = show(job.roles.at(-1)?.finishDate) ? \"\" : \"no-print\";\n  return (\n    <section className={`job ${hide}`}>\n      <Organization org={job.organization} />\n      {job.roles.map((role) => (\n        <Role key={role.name} role={role} />\n      ))}\n    </section>\n  );\n};\n\nconst Role = ({ role }: { role: ResumeTypes.Role }) => (\n  <section className=\"role\">\n    <h5>\n      <em className=\"name\">{role.name}</em>\n    </h5>\n    <h5 className=\"about\">\n      <small className=\"start date\">{role.startDate}</small>\n      <small className=\"finish date\">{role.finishDate ?? \"Current\"}</small>\n    </h5>\n    {role.challenges && (\n      <div className=\"details\">\n        {role.challenges.map(({ description }) => (\n          <MD key={description}>{description}</MD>\n        ))}\n      </div>\n    )}\n    <div className=\"competences\">\n      <Competences competences={role.competences} />\n    </div>\n  </section>\n);\n\nexport const COMPETENCES_LCL = new Map([\n  [\"amazon-web-services\", \"Amazon Web Services (AWS)\"],\n  [\"angular\", \"Angular\"],\n  [\"angularjs\", \"AngularJS\"],\n  [\"aws\", \"Amazon Web Services (AWS)\"],\n  [\"bedrock\", \"Amazon Bedrock\"],\n  [\"curriculum development\", \"Curriculum Development\"],\n  [\"front end\", \"Front End\"],\n  [\"html & css\", \"HTML & CSS\"],\n  [\"instructing\", \"Instructor\"],\n  [\"interview training\", \"Technical Interview Training\"],\n  [\"javascript\", \"JavaScript\"],\n  [\"k8s\", \"Kubernetes\"],\n  [\"kubernetes\", \"Kubernetes\"],\n  [\"llm\", \"Large Language Models\"],\n  [\"mit-scratch\", \"MIT Scratch\"],\n  [\"node\", \"NodeJS\"],\n  [\"nodejs\", \"NodeJS\"],\n  [\"python\", \"Python\"],\n  [\"react\", \"React\"],\n  [\"rust\", \"Rust\"],\n  [\"technical writing\", \"Technical Writing\"],\n  [\"typescript\", \"TypeScript\"],\n]);\n\nexport const COMPETENCES_MAP = new Map([\n  [\"amazon-web-services\", \"https://aws.amazon.com\"],\n  [\"angular\", \"https://angular.io/\"],\n  [\"angularjs\", \"https://angularjs.org\"],\n  [\"bedrock\", \"https://aws.amazon.com/bedrock/\"],\n  [\"dart\", \"http://dart.dev\"],\n  [\"golang\", \"https://go.dev\"],\n  [\"google-cloud-platform\", \"https://cloud.google.com/\"],\n  [\"google-compute-engine\", \"https://cloud.google.com/compute\"],\n  [\"graphql\", \"https://graphql.org/\"],\n  [\"istio\", \"https://istio.io\"],\n  [\"kompose\", \"https://kompose.io/\"],\n  [\"kubernetes\", \"https://kubernetes.io\"],\n  [\"mit-scratch\", \"https://scratch.mit.edu\"],\n  [\"node.js\", \"https://nodejs.org\"],\n  [\"nodejs\", \"https://nodejs.org\"],\n  [\"python\", \"https://www.python.org\"],\n  [\"react\", \"https://react.dev/\"],\n  [\"redis\", \"redis.io\"],\n  [\"rust\", \"https://rust-lang.org\"],\n  [\"socket.io\", \"https://socket.io\"],\n  [\"typescript\", \"https://www.typescriptlang.org/\"],\n]);\n\nconst Competences = ({\n  competences = [],\n}: {\n  competences?: ResumeTypes.Competence[];\n}) => (\n  <ul>\n    {competences.map(({ name }) => (\n      <li key={name}>\n        <A href={COMPETENCES_MAP.get(name.toLowerCase())}>\n          {COMPETENCES_LCL.get(name.toLowerCase()) ?? `${name}`}\n        </A>\n      </li>\n    ))}\n  </ul>\n);\n"],"names":["Promise","resolve","then","__webpack_require__","t","bind","Card","className","header","children","footer","param","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","article","jsxs","Fragment","h3","main","aboutMe","Contact","contact","links","contactLinks","publicProfiles","contactMails","map","type","URL","concat","p","phoneNumbers","countryCode","number","allLinks","jsx_runtime","Links","AboutMe","hgroup","h1","Link","href","profile","name","surnames","h2","title","avatar","Avatar","location","Location","relevantLinks","figure","Image","height","width","alt","src","link","mediaType","data","style","maxWidth","Object","entries","k","v","span","nav","ul","li","a","Layout","div","id","Head","meta","content","resume","Date","getFullYear","cite","parseInfo","info","spec","undefined","tag","classes","attributes","idx","state","attr","value","transition","next","push","length","charAt","sort","renderInfo","join","attrs","TOKEN_TYPE","isHtmlEntity","known_entities_namespaceObject","KNOWN_ENTITIES","Map","RegisterEntitiesName","LookupEntitiesName","REFERENCES","MOVED","Set","ReferencesName","SectionsName","marked","marked_esm","M2","use","renderer","heading","token","tokens","depth","text","parser","parseInline","extensions","has","parse","level","start","indexOf","tokenizer","match","raw","reference","groups","ref","replace","add","get","walkTokens","set","index","leader","trim","lexer","blockTokens","innerTokens","inlineTokens","image","MD","body","useMemo","replaceWalkTokens","clear","_walkTokens","callback","slugger","github_slugger","Z","values","call","stack","i","popSection","section","pop","at","splice","pos","pushSection","slug","dangerouslySetInnerHTML","__html","A","role","COMPETENCES_LCL","Organization","org","h4","JobDetail","job","hide","show","date","year","Number","substring","roles","finishDate","organization","Role","h5","em","small","startDate","challenges","description","Competences","competences","COMPETENCES_MAP","toLowerCase"],"sourceRoot":""}